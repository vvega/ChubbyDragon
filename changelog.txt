5/13/2014:
	General:
		-all layout transitions handled by GC.app.transitionViews() method
		-emitters replaced with function calls
		-layout width/height are now globals
		-class-specific variables denoted as private fields with “_”
		-constants organized and denoted by full capitalization
		-no new features added (yet...)
	Application.js
		-layout dimension initialization consolidated to _initDimensions() and result in HEIGHT and WIDTH globals
		-GameView and GameOverView separate creation functions no longer needed
		-transitionViews()
			>can take extra data parameter “params” to pass to nextView (used for score)
			>calls fade-out animation for the currently active view
			>resets/constructs the nextview
			>shows the nextview and reassigns the active view on animation end
			>if there is no active view, constructs and shows the nextview after transition duration
	Layouts:
		BaseView.js added to serve as base ImageView class for all UI views
			-default init properties include:
				>background image
				>visibility set to false
				>zIndex set to Z_PREV
			-added BaseView.isBuilt to signify whether a UI has already built its subviews
			-resetView() added
				>if the view hasn’t been built yet, it will return false (no need to reset view)
				>otherwise returns true
				>subclasses are responsible for further implementation
			-constructView() added
				>calls build() on UI view if view hasnt already been built
				>prepares view for visibility
			-hideView() added
				>consolidated visibility, opacity, and zIndex changes to this method
			-showView() brings view to the top
		GameOverView.js
			-now inherits init function from BaseView
		GameView.js
			-fields organized into private/constant variables
			-init contains initialization of game constants
			-instance-dependent variables set within _initGameVariables()
			-view initialization put within _initViews()
			-tick and input assignments put within _initGameHandlers(), which is called at the end of build() (once)
			-nextCharData() for ScoreViews separated into its own function
			-character sprite data handling moved into Character.js
	Objects:
		General
			-collision object properties no longer recreated on check
		Character.js 
			-merges sheet sprite data on initialization
			-collision object properties are no longer recreated on update
5/18/2014:
	General:
		-refactored file system to reflect MVC-based organization
		-removed trailing whitespace and extra line breaks
	Application.js:
		-resetView() is now called during every call to transitionViews (if nextView is already built)
		-zIndex/opacity/visibility manipulation handled within BaseView's hideView/showView for stronger semantic design
		-_obtainData() creates data management globals for high scores and image data
	BaseView.js:
		-resetView implementation now completely handled by subclasses
		-constructview will call build() if the view is not already built, and prepare visibility/opacity for seamless view transition when showView() is called
		-showview will serve as the final step by bringing the view to the front via zIndex
	TitleScreen.js:
		-added "Current high score" textview
	GameView.js:
		-removed jump flag (replaced with character.numJumps)
		-jump elevation reduced to account for multi-jump
		-character allowed to jump three times in a row, with a jump reset called upon return to default y position
		-crumbEngine added with character as view parent
		-runtick added to tick function within gameview
		-replaced lives scoreview with a new custom view called LivesView, which is updated upon character death and reset when the gameview is reset
		-initViews and initGameHandlers renamed to setViews and setGameHandlers
		-ParallaxView layer class extended to EnvironmentLayer to accomodate game-specific terrain and item generation
		-nextChardata function pulled out of build()
	GameOverView.js:
		-high score is now written to local storage
	Character.js:
		-"weight" property changed to "speed" for stronger semantic design
		-MAX_JUMPS, jumpCount, and resetJumps() handled within this class
		-point values are now in direct correlation with character speed (high risk, high reward)
		-eating too much cake (reaching lower speed limit) now results in death! (instead of forcing the player to live with a speed of 1yd/hr)
		-added _scoreText and _speedText to visually represent game mechanics
	EnvironmentLayer.js:
		-subclass of ParallaxView.Layer 
		-handles random assignment of game item properties on obtainView()
		-"type" property added to conform to CrumbEngine
		-bad terrain modifier now increases slightly with increased speed!
	ItemBlock.js:
		-crumbEngine is now passed in with opts
		-base item elevation saved
		-items now have a slight "bounce" while onscreen
		-runAnimation called when view becomes visible and activeAnim property isnt true
		-runAnimation recursive logic dependent on activeAnim property being true
		-activeAnim set to false on initial object creation and when "eaten"
		-items now call CrumbEngine.emitParticles(type) on collision
	LivesView.js:
		-view that stores a number of child imageviews equal to max number of lives
		-creates imageviews based on an object of properties passed into opts
		-stored as reversed array, and animated out from left to right
	CrumbEngine.js:
		-position based on parent character
		-builds particles based on item type prior to calling super method emitParticles()
		-particles adjust delta-x based upon character speed
5/27/2014:
	General: 
		-Tons of new art!
		-New feature: fire breath (items are burned, apples yield points*BOOST_MODIFIER amount)
		-additional animation
	GameView: 
		-character is now a property of the GameView object for easier access
		-the zIndex is now adjusted so that the character seems "nested" within the environment
		-new parallax layers: mountains and clouds
		-boostBar view added
		-flameEngine class created
	Character:
		-sprite framerate now correlates to speed property
		-points now differ in appearance when fireboost is active
		-added new functions to increase boost level, activate boost, and cancel it
	EnvironmentLayer:
		-added logic to randomize cloud image and elevation
	ItemBlock:
		-fireboost branching logic added to points, speed, and particle appearance 
		-crumb particles now render at item location instead of relative to the dragon
	BoostBar:
		-utilizes two imagescaleviews placed on top of one another to convey the fire boost level
		-increases based upon amount eaten by the player. Apples yield more than cakes.
		-decreases target boost level when depletion property is flagged true
5/29/2014:
	General:
		-Sprite animation for dying and firebreath running/jumping added
		-Current spriteManager refactored to ImageManager
		-Animation functionality encapsulated within new SpriteManager class.
		-Boost bar now starts depleting from a percentage of 100 each time (even if last value was over)
		
	
		
		

		
